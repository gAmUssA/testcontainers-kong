plugins {
  id 'java-library'
  id "io.franzbecker.gradle-lombok" version "5.0.0"
  id 'maven-publish'
  id 'groovy'
}

repositories {
  mavenCentral()
}

group = 'com.konghq.testcontainers'
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/groovy"]

ext {
  lombokVer = '1.18.24'
}
dependencies {
  // Use JUnit Jupiter for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
  testImplementation 'io.rest-assured:rest-assured:4.5.0'
  testImplementation 'org.assertj:assertj-core:3.22.0'

  api 'org.testcontainers:testcontainers:1.17.4'
  api "javax.annotation:javax.annotation-api:1.3.2"
  implementation 'ch.qos.logback:logback-classic:1.2.11'

  annotationProcessor "org.projectlombok:lombok:$lombokVer"
  implementation "org.projectlombok:lombok:$lombokVer"

  testAnnotationProcessor "org.projectlombok:lombok:$lombokVer"
  testCompileOnly "org.projectlombok:lombok:$lombokVer"

  testImplementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2')
  testImplementation 'org.codehaus.groovy:groovy-all:3.0.10'
}

tasks.named('test') {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}

tasks.withType(JavaCompile) {
  options.compilerArgs = [
      '-Xlint:unchecked',
      '-Xlint:deprecation',
      '-Werror'
  ]
}

test {
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = false
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId = project.getGroup()
      artifactId = project.getName()
      version = project.getVersion()

      from components.java
    }
  }
}